<UserControl x:Class="ThreadPainter.MVVM.View.TyperView"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:local="clr-namespace:ThreadPainter.MVVM.View" 
             xmlns:validation="clr-namespace:ThreadPainter.Validation"
             xmlns:customControl="clr-namespace:ThreadPainter.CustomControls"
             mc:Ignorable="d" 
             d:DesignHeight="450" d:DesignWidth="800"
             
             customControl:SizeObserver.Observe="True"
             customControl:SizeObserver.ObservedWidth="{Binding Width, Mode=OneWayToSource}"
             customControl:SizeObserver.ObservedHeight="{Binding Height, Mode=OneWayToSource}">
    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="60"/>
            <RowDefinition Height="60"/>
            <RowDefinition/>
        </Grid.RowDefinitions>
        <Grid>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto"/>
                <ColumnDefinition Width="*"/>
                <ColumnDefinition Width="Auto"/>
                <ColumnDefinition Width="*"/>
            </Grid.ColumnDefinitions>
            <TextBlock Grid.Column="0"
                   Grid.Row="0"
                   Text="Type in the number of threads"
                   VerticalAlignment="Center"/>
            <TextBox x:Name="ThreadValidation" 
                 Grid.Column="1"
                 Grid.Row="0"
                 Height="30"
                 Width="100"
                 HorizontalAlignment="Left"
                 HorizontalContentAlignment="Left"
                 VerticalContentAlignment="Center"
                 Margin="20 0 0 0"
                 Style="{StaticResource IntMinMaxValidationInput}">
                <TextBox.Text>
                    <Binding Path="ThreadNumber" UpdateSourceTrigger="PropertyChanged">
                        <Binding.ValidationRules>
                            <validation:IntMinMaxValidation/>
                        </Binding.ValidationRules>
                    </Binding>
                </TextBox.Text>
            </TextBox>
            <TextBlock Grid.Column="2"
                   Grid.Row="0"
                   Text="Type in speed (points/seconds)"
                   VerticalAlignment="Center"/>
            <TextBox x:Name="SpeedValidation"
                 Grid.Column="3"
                 Grid.Row="0"
                 Height="30"
                 Width="100"
                 HorizontalAlignment="Left"
                 HorizontalContentAlignment="Left"
                 VerticalContentAlignment="Center"
                 Margin="20 0 0 0"
                 Style="{StaticResource IntMinMaxValidationInput}">
                <TextBox.Text>
                    <Binding Path="Speed" UpdateSourceTrigger="PropertyChanged">
                        <Binding.ValidationRules>
                            <validation:IntMinMaxValidation/>
                        </Binding.ValidationRules>
                    </Binding>
                </TextBox.Text>
            </TextBox>
        </Grid>
        <Grid Grid.Row="1">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="100"/>
                <ColumnDefinition Width="100"/>
                <ColumnDefinition Width="100"/>
            </Grid.ColumnDefinitions>
            <Button x:Name="StartButton"
                    Content="Start"
                    Grid.Column="0"
                    Margin="20 5 0 5"
                    Height="20"
                    Width="60"
                    Command="{Binding StartButtonCommand}"
                    >
                <Button.Style>
                    <Style TargetType="Button">
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding ElementName=ThreadValidation, Path=(Validation.HasError)}" Value="True">
                                <Setter Property="IsEnabled" Value="False"/>
                            </DataTrigger>
                            <DataTrigger Binding="{Binding ElementName=SpeedValidation, Path=(Validation.HasError)}" Value="True">
                                <Setter Property="IsEnabled" Value="False"/>
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </Button.Style>
            </Button>
            <Button x:Name="StopButton"
                    Content="Stop"
                    Grid.Column="1"
                    Margin="20 5 0 5"
                    Height="20"
                    Width="60"
                    Command="{Binding StopButtonCommand}">
                <Button.Style>
                    <Style TargetType="Button">
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding ElementName=ThreadValidation, Path=(Validation.HasError)}" Value="True">
                                <Setter Property="IsEnabled" Value="False"/>
                            </DataTrigger>
                            <DataTrigger Binding="{Binding ElementName=SpeedValidation, Path=(Validation.HasError)}" Value="True">
                                <Setter Property="IsEnabled" Value="False"/>
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </Button.Style>
            </Button>
            <Button x:Name="ClearButton"
                    Content="Clear"
                    Grid.Column="2"
                    Margin="20 5 0 5"
                    Height="20"
                    Width="60"
                    Command="{Binding ClearButtonCommand}">
                <Button.Style>
                    <Style TargetType="Button">
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding ElementName=ThreadValidation, Path=(Validation.HasError)}" Value="True">
                                <Setter Property="IsEnabled" Value="False"/>
                            </DataTrigger>
                            <DataTrigger Binding="{Binding ElementName=SpeedValidation, Path=(Validation.HasError)}" Value="True">
                                <Setter Property="IsEnabled" Value="False"/>
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </Button.Style>
            </Button>


            <ItemsControl ItemsSource="{Binding EllipseItems, Mode=TwoWay}" Grid.Row="2">
                <ItemsControl.ItemsPanel>
                    <ItemsPanelTemplate>
                        <Canvas/>
                    </ItemsPanelTemplate>
                </ItemsControl.ItemsPanel>
                <!--<ItemsControl.ItemContainerStyle>
            <Style TargetType="ContentPresenter">
                <Setter Property="Canvas.Left" Value="{Binding X}"/>
                <Setter Property="Canvas.Top" Value="{Binding Y}"/>
            </Style>
        </ItemsControl.ItemContainerStyle>-->
                <ItemsControl.ItemTemplate>
                    <DataTemplate>
                        <Ellipse  Width="{Binding Radius}" Height="{Binding Radius}" Fill="Black">
                            <Ellipse.RenderTransform>
                                <TranslateTransform X="{Binding X}" Y="{Binding Y}"/>
                            </Ellipse.RenderTransform>
                        </Ellipse>
                    </DataTemplate>
                </ItemsControl.ItemTemplate>
            </ItemsControl>
        </Grid>
    </Grid>
</UserControl>
